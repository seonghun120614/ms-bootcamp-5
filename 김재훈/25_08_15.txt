# 자바 시작하기 - 개발 환경 구축

## 왜 자바인가?

- 기업 선호도 1위
- 안정성과 성능
- 풍부한 생태계
- 취업 시장

## 자바 언어의 핵심 특징

- 플랫폼 독립성
- 객체지향 프로그래밍 - 코드 재사용성과 유지보수성
- 자동 메모리 관리 - 가비지 컬렉션으로 메모리 누수 방지
- 강력한 표준 라이브러리
- 모던 자바
- 람다 표현식 - 함수형 프로그래밍 (Java 8+)
- Stream API - 데이터 처리를 선언적으로 작성 가능
- 병렬 프로그래밍

## JDK 란?

- 자바 프로그램을 개발하고 실행하는 데 필요한 모든 도구를 포함한 개발 키트
- 구성 요소
    - JRE : Java Runtime Environment (실행 환경)
    - 개발 도구 : 컴파일러와 개발 유틸리티
    - 문서 : API 문서와 사용 가이드
- JDK 종류
    - **Adoptium Temurin**
    - Oracle JDK
    - OpenJDK
    - Amazon Corretto

## JDK21

- LTS(Long Term Support) 버전
    - Oracle이 장기간(최소 3년) 지원하는 안정적인 버전
- 주요 LTS 버전
    - JDK 8 - 람다 표현식 도입
    - JDK 11 - 모듈 시스템 안정화, HTTP Client API
    - JDK 17 - 패턴 매칭, 텍스트 블록, 레코드 클래스
    - JDK 21 - 가상 스레드, 패턴 매칭 강화

## 개발 도구(IDE)

- IntelliJ IDEA
    - Community Edition (무료) vs Ultimate Edition (유료)
    - 자동 완성, 리팩토링 기능 우수
- Eclipse
    - 완전 무료, 오픈 소스
- Visual Studio Code
    - 가볍고 빠르다.

---

# 자바 프로그램의 기본 구조

## 핵심 요소

- 클래스 선언
    
    ```java
    public class <클래스_이름> {
    	// 클래스 내용
    }
    ```
    
    - 클래스 네이밍 규칙
        - 클래스 이름 = 파일 이름
        - 첫 글자는 대문자 (CamelCase)
- main 메소드
    
    ```java
    public static void main(String[] args) {
    	// 실행할 코드
    }
    ```
    
    - 자바 프로그램의 시작점
    - JVM이 가장 먼저 실행하는 메서드
    - `String[] args` : 명령줄에서 전달받는 인자들
- 출력문
    
    ```java
    System.out.println("Hello");
    ```
    
    | 요소 | 역할 |
    | --- | --- |
    | System | 자바 시스템 클래스 |
    | out | 표준 출력 스트림 |
    | println() | 출력 후 줄바꿈 |

## 컴파일과 실행

- 컴파일 (javac)
    
    ```java
    javac Hello.java
    ```
    
    - `.java` → `.class` 파일로 변환 : 컴파일 성공 시 `Hello.class` 생성
- 실행(java)
    
    ```java
    java Hello
    ```
    
    - JVM이 `.class`파일을 실행 : 확장자(`.class`) 생략!

---

# 주석문

## 주석?

- 프로그램 실행과 무관한 설명을 코드에 남기는 것
- 한 줄 주석 : `//...` 해당 줄 끝까지 주석 처리
- 범위 주석 : `/*...*/` 여러 줄 범위 주석
- JavaDoc : `/**…*/` API 문서화용(클래스/메서드/필드 바로 위)

## JavaDoc 주요 태그

- `@param` : 매개변수 설명
- `@return` : 반환값 설명
- `@throws` : 예외 설명
- `@author` : 작성자
- `@since` : 도입 버전
- `@deprecated` : 사용 중단
- `@see` : 참조

## 주석 작성 원칙

- 코드가 “무엇”을 하는지보다 “왜” 그렇게 했는지 설명
- 복잡한 비즈니스 로직의 배경 설명
- 임시 코드나 해결 방법에 대한 설명
- TODO, FIXME 등의 마커로 추후 작업 표시